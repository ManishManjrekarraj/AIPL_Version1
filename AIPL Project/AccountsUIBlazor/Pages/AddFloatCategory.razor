@page "/AddFloatCategory"

@using Accounts.Models.UIModels
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@inject HttpClient HttpClient;
@inject NavigationManager navigationManager;

<h3>AddFloatCategory</h3>

<EditForm Model="UIFloatCategory" OnValidSubmit="ValidSubmit">
    <div class="row">
        <div class="row" style="margin-top:10px">
            <div class="col-md-12">
                <label for="floatName">Float Name</label>
                <input type="text" class="form-control" id="floatName" @bind-value="@UIFloatCategory.FloatCategory" placeholder="enter float category..." />
            </div>
        </div>


        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add</button>

    </div>
</EditForm>

<div class="row mt-2">
    <h4>Chain Constants Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="floatCategoryGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
        Data="@floatCategoryList" TItem="UIFloatCategory" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="UIFloatCategory" Property="FloatCategoryId" Title="Float Category Id" Width="120px" />

                <RadzenDataGridColumn TItem="UIFloatCategory" Property="FloatCategory" Title="Float Category" Width="120px" />

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    public UIFloatCategory UIFloatCategory { get; set; } = new();
    private UIFloatCategory uifloatcategory;

    // for radzen grid
    RadzenDataGrid<UIFloatCategory> floatCategoryGrid;
    private List<UIFloatCategory> floatCategoryList = new List<UIFloatCategory>();

    protected override async Task OnInitializedAsync()
    {
        await LoadFloatCategoryDetails();
    }

    public async Task LoadFloatCategoryDetails()
    {
        try
        {
            floatCategoryList = await HttpClient.GetFromJsonAsync<List<UIFloatCategory>>("FloatCategory/GetAllCategories");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chain constants: {ex.Message}");
        }
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        uifloatcategory = (UIFloatCategory)formContext.Model;

        try
        {
            // Console.WriteLine($"data : {ropeconstants.RopeType}");
            // Console.WriteLine($"data : {ropeconstants.TensileStrength}");
            // Console.WriteLine($"data : {ropeconstants.KValue}");
            // Console.WriteLine($"data : {ropeconstants.RequiredDiameter}");
            var obj = await HttpClient.PostAsJsonAsync($"FloatCategory", uifloatcategory);
            // Console.WriteLine(obj);
            UIFloatCategory = new();

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }

}
